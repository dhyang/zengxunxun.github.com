<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: C | zengxx'notes]]></title>
  <link href="http://zengxunxun.github.com/blog/categories/c/atom.xml" rel="self"/>
  <link href="http://zengxunxun.github.com/"/>
  <updated>2013-03-26T10:01:09+08:00</updated>
  <id>http://zengxunxun.github.com/</id>
  <author>
    <name><![CDATA[zengxunxun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[queue.c]]></title>
    <link href="http://zengxunxun.github.com/blog/2013/03/15/queue-dot-h/"/>
    <updated>2013-03-15T16:49:00+08:00</updated>
    <id>http://zengxunxun.github.com/blog/2013/03/15/queue-dot-h</id>
    <content type="html"><![CDATA[<p><div class='bogus-wrapper'><notextile><div><pre class="prettyprint linenums">#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
#include &lt;sys/queue.h&gt;

/*
 * LIST_HEAD(name, type)
 * LIST_HEAD_INITIALIZER(head)
 * LIST_ENTRY(type)
 * LIST_INIT(head)
 * LIST_INSERT_AFTER(listelm, elm, field)
 * LIST_INSERT_BEFORE(listelm, elm, field)
 * LIST_INSERT_HEAD(head, elm, field)
 * LIST_REMOVE(elm, field)
 * LIST_FOREACH(var, head, field)
 * LIST_EMPTY(head)
 * LIST_FIRST(head)
 * LIST_NEXT(elm, field)
 * */

LIST_HEAD(personHead, person) head;

#define SIZE_PERSON sizeof(struct person)

typedef struct person{
    char *name;
    int age;
    LIST_ENTRY(person) entries;
}persNode, *perNodePtr;

perNodePtr foo_struct(perNodePtr p, char *name, int age)
{
    p = (perNodePtr)malloc(SIZE_PERSON);
    p-&gt;name = name;
    p-&gt;age = age;
    return p;
}

int main()
{
    LIST_INIT(&amp;head);
    perNodePtr p1 = NULL;
    p1 = foo_struct(p1, "Jim", 12);
    LIST_INSERT_HEAD(&amp;head, p1, entries);

    perNodePtr p2 = NULL;
    p2 = foo_struct(p2, "Tom", 33);
    LIST_INSERT_AFTER(p1, p2, entries);

    perNodePtr p3 = NULL;
    p3 = foo_struct(p2, "Jerry", 21);
    LIST_INSERT_AFTER(p1, p3, entries);

    perNodePtr p;
    while(NULL != (p = LIST_FIRST(&amp;head))) {
        LIST_REMOVE(p, entries);
        free(p);
    }

    LIST_FOREACH(p, &amp;head, entries) {
        printf("%s\n%d\n", p-&gt;name, p-&gt;age);
    }
    return 0;
}
</pre></div></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[dbus]]></title>
    <link href="http://zengxunxun.github.com/blog/2013/03/15/dbus/"/>
    <updated>2013-03-15T14:58:00+08:00</updated>
    <id>http://zengxunxun.github.com/blog/2013/03/15/dbus</id>
    <content type="html"><![CDATA[<p><a href="http://www.freedesktop.org/wiki/Software/dbus">dbus 官网</a></p>

<p><pre class="prettyprint linenums">
&lt;policy context="default"&gt;
  &lt;!-- Deny everything then punch holes --&gt;
  &lt;allow send_interface="*"/&gt;
  &lt;allow receive_interface="*"/&gt;
  &lt;allow own="*"/&gt;
  &lt;!-- But allow all users to connect --&gt;
  &lt;allow user="*"/&gt;
  &lt;!-- Allow anyone to talk to the message bus --&gt;
  &lt;allow send_destination="org.freedesktop.DBus"/&gt;
  &lt;allow receive_sender="org.freedesktop.DBus"/&gt;
  &lt;!-- valid replies are always allowed --&gt;
  &lt;allow send_requested_reply="true"/&gt;
  &lt;allow receive_requested_reply="true"/&gt;
&lt;/policy&gt;
</pre></p>

<p><pre class="prettyprint linenums">
typedef struct DBusObjectPathVTable DBusObjectPathVTable;
struct DBusObjectPathVTable
{&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;DBusObjectPathUnregisterFunction unregister_function; 
DBusObjectPathMessageFunction message_function; 
void (* dbus_internal_pad1) (void *); 
void (* dbus_internal_pad2) (void *); 
void (* dbus_internal_pad3) (void *); 
void (* dbus_internal_pad4) (void *); 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;};
</pre></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Libapr Programming Tutorial]]></title>
    <link href="http://zengxunxun.github.com/blog/2013/03/14/libapr-programming-tutorial/"/>
    <updated>2013-03-14T21:49:00+08:00</updated>
    <id>http://zengxunxun.github.com/blog/2013/03/14/libapr-programming-tutorial</id>
    <content type="html"><![CDATA[<p><pre class="prettyprint linenums">&lt;/p&gt;

&lt;h1&gt;include &amplt;libapr/apr_general.h&gt;&lt;/h1&gt;

&lt;h1&gt;include &amplt;libapr/apr_file_io.h&gt;&lt;/h1&gt;

&lt;p&gt;</pre></p>

<blockquote><p><a href="https://apr.apache.org/docs/apr/1.4/group__apr__file__io.html">open</a>
<pre class="prettyprint linenums">
apr_status_t
apr_file_open(&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;apr_file_t **newf,  //result argument
const char *fname,  //file name path
apr_int32_t flag,   //open flag
apr_fileperms_t perm,  //access permission
apr_pool_t *pool   //memory pool to use
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;);
</pre></p>

<p><a href="https://apr.apache.org/docs/apr/1.4/group__apr__file__io.html">read</a> / <a href="https://apr.apache.org/docs/apr/1.4/group__apr__file__io.html">write</a>
<pre class="prettyprint linenums">
apr_status_t apr_file_read(&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;apr_file_t *thefile, 
void *buf, 
apr_size_t *nbytes  //value-result argument
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;);
</pre>
<pre class="prettyprint linenums">
apr_status_t apr_file_write(&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;apr_file_t *thefile, 
void *buf, 
apr_size_t *nbytes  //value-result argument
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;);
</pre></p>

<p><a href="https://apr.apache.org/docs/apr/1.4/group__apr__file__io.html">close</a>
<pre class="prettyprint linenums">
apr_status_t apr_file_close (apr_file_t *file)
apr_pool_destroy
</pre></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Apache Portable Runtime Tutorial]]></title>
    <link href="http://zengxunxun.github.com/blog/2013/03/14/libapr/"/>
    <updated>2013-03-14T14:44:00+08:00</updated>
    <id>http://zengxunxun.github.com/blog/2013/03/14/libapr</id>
    <content type="html"><![CDATA[<ul>
<li><a href="http://dev.ariel-networks.com/apr/apr-tutorial/html/apr-tutorial.html">Libapr(Apache Portable Runtime) Programming Tutorial</a></li>
<li><a href="https://apr.apache.org/docs/apr/1.4/">Programmer's Manual</a></li>
<li>In general, objects lifetime control is the most difficult part in programming. Thus, there are many other techniques for it, such as smart pointer, GC(garbage collection) and so on. Note that it is a bit hard to use such techniques at the same time. Since memory pool is one of such techniques, you have to be careful about the mixture.</li>
<li>Memory Pool (apr_pool_t) <a href="http://dev.ariel-networks.com/apr/apr-tutorial/sample/mp-sample.c">mp-sample.c</a>
<pre class="prettyprint linenums">
apr_status_t apr_pool_initialize (void);
void apr_pool_terminate (void):w
void&lt;em&gt; apr_pcalloc (apr_pool_t &lt;/em&gt;p, apr_size_t size)
void apr_pool_destroy (apr_pool_t *p)
</pre></li>
<li>-D_LARGEFILE64_SOURCE fix <code>error: unknown type name 'off64_t'</code></li>
</ul>


<!--more-->


<ul>
<li>file handling <a href="http://dev.ariel-networks.com/apr/apr-tutorial/html/apr-tutorial-5.html">file handling</a>
<pre class="prettyprint linenums">
apr_file_open
</pre></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fork a daemon process]]></title>
    <link href="http://zengxunxun.github.com/blog/2013/03/11/fork-a-daemon-process/"/>
    <updated>2013-03-11T16:13:00+08:00</updated>
    <id>http://zengxunxun.github.com/blog/2013/03/11/fork-a-daemon-process</id>
    <content type="html"><![CDATA[<ul>
<li>处理信号
<div class='bogus-wrapper'><notextile><div><pre class="prettyprint linenums">#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
#include &lt;signal.h&gt;
#include &lt;unistd.h&gt;

static int keep_going = 1;

static void termination_handler(int signum) 
{
    fprintf(stderr,"SIGTERM received! exit!\n");
    keep_going = 0;
}

int main()
{
    struct sigaction act;
    act.sa_handler = termination_handler;
    sigemptyset(&amp;act.sa_mask);
    sigaction(SIGTERM, &amp;act, NULL);
    sigaction(SIGUSR1, &amp;act, NULL);
    fprintf(stderr, "%d\n", getpid());
    while(keep_going);
    fprintf(stderr, "exit");    
    return 0;
}
</pre></div></notextile></div></li>
</ul>


<!--more-->


<ul>
<li>创建守护进程
<div class='bogus-wrapper'><notextile><div><pre class="prettyprint linenums">#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
#include &lt;unistd.h&gt;
#include &lt;fcntl.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;sys/stat.h&gt;

#ifndef HAVE_DAEMON

/* Daemonize myself. */
int daemon (int nochdir, int noclose)
{
    pid_t pid;

    pid = fork ();

    /* In case of fork is error. */
    if (pid &lt; 0)
    {
        return -1;
    }

    /* In case of this is parent process. */
    if (pid != 0)
        exit (0);

    /* Become session leader and get pid. */
    pid = setsid();

    if (pid == -1)
    {
        return -1;
    }

    /* Change directory to root. */
    if (! nochdir)
        chdir ("/");

    /* File descriptor close. */
    if (! noclose)
    {
        int fd;
        fd = open ("/dev/null", O_RDWR, 0);
        if (fd != -1)
        {
            dup2 (fd, STDIN_FILENO);
            dup2 (fd, STDOUT_FILENO);
            dup2 (fd, STDERR_FILENO);
            if (fd &gt; 2)
                close (fd);
        }
    }
    umask(0027);
    return 0;
}

int main()
{
    if (daemon(1, 1)) {
        fprintf(stderr, "daemon() failed!");
    }
    while(1);
    return 0;
}
#endif /* HAVE_DAEMON */
</pre></div></notextile></div></li>
</ul>

]]></content>
  </entry>
  
</feed>
