<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: Linux | zengxx'notes]]></title>
  <link href="http://zengxunxun.github.com/blog/tags/linux/atom.xml" rel="self"/>
  <link href="http://zengxunxun.github.com/"/>
  <updated>2013-03-26T10:01:09+08:00</updated>
  <id>http://zengxunxun.github.com/</id>
  <author>
    <name><![CDATA[zengxunxun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Fork a daemon process]]></title>
    <link href="http://zengxunxun.github.com/blog/2013/03/11/fork-a-daemon-process/"/>
    <updated>2013-03-11T16:13:00+08:00</updated>
    <id>http://zengxunxun.github.com/blog/2013/03/11/fork-a-daemon-process</id>
    <content type="html"><![CDATA[<ul>
<li>处理信号
<div class='bogus-wrapper'><notextile><div><pre class="prettyprint linenums">#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
#include &lt;signal.h&gt;
#include &lt;unistd.h&gt;

static int keep_going = 1;

static void termination_handler(int signum) 
{
    fprintf(stderr,"SIGTERM received! exit!\n");
    keep_going = 0;
}

int main()
{
    struct sigaction act;
    act.sa_handler = termination_handler;
    sigemptyset(&amp;act.sa_mask);
    sigaction(SIGTERM, &amp;act, NULL);
    sigaction(SIGUSR1, &amp;act, NULL);
    fprintf(stderr, "%d\n", getpid());
    while(keep_going);
    fprintf(stderr, "exit");    
    return 0;
}
</pre></div></notextile></div></li>
</ul>


<!--more-->


<ul>
<li>创建守护进程
<div class='bogus-wrapper'><notextile><div><pre class="prettyprint linenums">#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
#include &lt;unistd.h&gt;
#include &lt;fcntl.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;sys/stat.h&gt;

#ifndef HAVE_DAEMON

/* Daemonize myself. */
int daemon (int nochdir, int noclose)
{
    pid_t pid;

    pid = fork ();

    /* In case of fork is error. */
    if (pid &lt; 0)
    {
        return -1;
    }

    /* In case of this is parent process. */
    if (pid != 0)
        exit (0);

    /* Become session leader and get pid. */
    pid = setsid();

    if (pid == -1)
    {
        return -1;
    }

    /* Change directory to root. */
    if (! nochdir)
        chdir ("/");

    /* File descriptor close. */
    if (! noclose)
    {
        int fd;
        fd = open ("/dev/null", O_RDWR, 0);
        if (fd != -1)
        {
            dup2 (fd, STDIN_FILENO);
            dup2 (fd, STDOUT_FILENO);
            dup2 (fd, STDERR_FILENO);
            if (fd &gt; 2)
                close (fd);
        }
    }
    umask(0027);
    return 0;
}

int main()
{
    if (daemon(1, 1)) {
        fprintf(stderr, "daemon() failed!");
    }
    while(1);
    return 0;
}
#endif /* HAVE_DAEMON */
</pre></div></notextile></div></li>
</ul>

]]></content>
  </entry>
  
</feed>
